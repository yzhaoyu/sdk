/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddRecordsRequest 在指定表格和子表中创建一到多条新记录请求
type AddRecordsRequest struct {
	Records []AddRecord `json:"records,omitempty"`
}

// NewAddRecordsRequest instantiates a new AddRecordsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRecordsRequest() *AddRecordsRequest {
	this := AddRecordsRequest{}
	return &this
}

// NewAddRecordsRequestWithDefaults instantiates a new AddRecordsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRecordsRequestWithDefaults() *AddRecordsRequest {
	this := AddRecordsRequest{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *AddRecordsRequest) GetRecords() []AddRecord {
	if o == nil || o.Records == nil {
		var ret []AddRecord
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRecordsRequest) GetRecordsOk() ([]AddRecord, bool) {
	if o == nil || o.Records == nil {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *AddRecordsRequest) HasRecords() bool {
	if o != nil && o.Records != nil {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []AddRecord and assigns it to the Records field.
func (o *AddRecordsRequest) SetRecords(v []AddRecord) {
	o.Records = v
}

func (o AddRecordsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableAddRecordsRequest struct {
	value *AddRecordsRequest
	isSet bool
}

func (v NullableAddRecordsRequest) Get() *AddRecordsRequest {
	return v.value
}

func (v *NullableAddRecordsRequest) Set(val *AddRecordsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRecordsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRecordsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRecordsRequest(val *AddRecordsRequest) *NullableAddRecordsRequest {
	return &NullableAddRecordsRequest{value: val, isSet: true}
}

func (v NullableAddRecordsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRecordsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


