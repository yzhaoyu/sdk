/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Condition valuexxx的序列号数字参考 FiletType，预留扩展其他的从30开始
type Condition struct {
	Var1 *StringValue `json:"1,omitempty"`
	Var2 *DoubleValue `json:"2,omitempty"`
	Var3 *BoolValue `json:"3,omitempty"`
	Var4 *FilterDateTimeValue `json:"4,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var5 interface{} `json:"5,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var6 interface{} `json:"6,omitempty"`
	Var7 *ListValue `json:"7,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var8 interface{} `json:"8,omitempty"`
	Var9 *ListValue `json:"9,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var10 interface{} `json:"10,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var11 interface{} `json:"11,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var12 interface{} `json:"12,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var13 interface{} `json:"13,omitempty"`
	// Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
	Var14 interface{} `json:"14,omitempty"`
	Var15 *StringValue `json:"15,omitempty"`
	Var16 *StringValue `json:"16,omitempty"`
	Var17 *ListValue `json:"17,omitempty"`
	Var30 *string `json:"30,omitempty"`
	Var31 *int32 `json:"31,omitempty"`
	Var32 *int32 `json:"32,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetVar1 returns the Var1 field value if set, zero value otherwise.
func (o *Condition) GetVar1() StringValue {
	if o == nil || o.Var1 == nil {
		var ret StringValue
		return ret
	}
	return *o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar1Ok() (*StringValue, bool) {
	if o == nil || o.Var1 == nil {
		return nil, false
	}
	return o.Var1, true
}

// HasVar1 returns a boolean if a field has been set.
func (o *Condition) HasVar1() bool {
	if o != nil && o.Var1 != nil {
		return true
	}

	return false
}

// SetVar1 gets a reference to the given StringValue and assigns it to the Var1 field.
func (o *Condition) SetVar1(v StringValue) {
	o.Var1 = &v
}

// GetVar2 returns the Var2 field value if set, zero value otherwise.
func (o *Condition) GetVar2() DoubleValue {
	if o == nil || o.Var2 == nil {
		var ret DoubleValue
		return ret
	}
	return *o.Var2
}

// GetVar2Ok returns a tuple with the Var2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar2Ok() (*DoubleValue, bool) {
	if o == nil || o.Var2 == nil {
		return nil, false
	}
	return o.Var2, true
}

// HasVar2 returns a boolean if a field has been set.
func (o *Condition) HasVar2() bool {
	if o != nil && o.Var2 != nil {
		return true
	}

	return false
}

// SetVar2 gets a reference to the given DoubleValue and assigns it to the Var2 field.
func (o *Condition) SetVar2(v DoubleValue) {
	o.Var2 = &v
}

// GetVar3 returns the Var3 field value if set, zero value otherwise.
func (o *Condition) GetVar3() BoolValue {
	if o == nil || o.Var3 == nil {
		var ret BoolValue
		return ret
	}
	return *o.Var3
}

// GetVar3Ok returns a tuple with the Var3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar3Ok() (*BoolValue, bool) {
	if o == nil || o.Var3 == nil {
		return nil, false
	}
	return o.Var3, true
}

// HasVar3 returns a boolean if a field has been set.
func (o *Condition) HasVar3() bool {
	if o != nil && o.Var3 != nil {
		return true
	}

	return false
}

// SetVar3 gets a reference to the given BoolValue and assigns it to the Var3 field.
func (o *Condition) SetVar3(v BoolValue) {
	o.Var3 = &v
}

// GetVar4 returns the Var4 field value if set, zero value otherwise.
func (o *Condition) GetVar4() FilterDateTimeValue {
	if o == nil || o.Var4 == nil {
		var ret FilterDateTimeValue
		return ret
	}
	return *o.Var4
}

// GetVar4Ok returns a tuple with the Var4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar4Ok() (*FilterDateTimeValue, bool) {
	if o == nil || o.Var4 == nil {
		return nil, false
	}
	return o.Var4, true
}

// HasVar4 returns a boolean if a field has been set.
func (o *Condition) HasVar4() bool {
	if o != nil && o.Var4 != nil {
		return true
	}

	return false
}

// SetVar4 gets a reference to the given FilterDateTimeValue and assigns it to the Var4 field.
func (o *Condition) SetVar4(v FilterDateTimeValue) {
	o.Var4 = &v
}

// GetVar5 returns the Var5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar5() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var5
}

// GetVar5Ok returns a tuple with the Var5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar5Ok() (*interface{}, bool) {
	if o == nil || o.Var5 == nil {
		return nil, false
	}
	return &o.Var5, true
}

// HasVar5 returns a boolean if a field has been set.
func (o *Condition) HasVar5() bool {
	if o != nil && o.Var5 != nil {
		return true
	}

	return false
}

// SetVar5 gets a reference to the given interface{} and assigns it to the Var5 field.
func (o *Condition) SetVar5(v interface{}) {
	o.Var5 = v
}

// GetVar6 returns the Var6 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar6() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var6
}

// GetVar6Ok returns a tuple with the Var6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar6Ok() (*interface{}, bool) {
	if o == nil || o.Var6 == nil {
		return nil, false
	}
	return &o.Var6, true
}

// HasVar6 returns a boolean if a field has been set.
func (o *Condition) HasVar6() bool {
	if o != nil && o.Var6 != nil {
		return true
	}

	return false
}

// SetVar6 gets a reference to the given interface{} and assigns it to the Var6 field.
func (o *Condition) SetVar6(v interface{}) {
	o.Var6 = v
}

// GetVar7 returns the Var7 field value if set, zero value otherwise.
func (o *Condition) GetVar7() ListValue {
	if o == nil || o.Var7 == nil {
		var ret ListValue
		return ret
	}
	return *o.Var7
}

// GetVar7Ok returns a tuple with the Var7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar7Ok() (*ListValue, bool) {
	if o == nil || o.Var7 == nil {
		return nil, false
	}
	return o.Var7, true
}

// HasVar7 returns a boolean if a field has been set.
func (o *Condition) HasVar7() bool {
	if o != nil && o.Var7 != nil {
		return true
	}

	return false
}

// SetVar7 gets a reference to the given ListValue and assigns it to the Var7 field.
func (o *Condition) SetVar7(v ListValue) {
	o.Var7 = &v
}

// GetVar8 returns the Var8 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar8() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var8
}

// GetVar8Ok returns a tuple with the Var8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar8Ok() (*interface{}, bool) {
	if o == nil || o.Var8 == nil {
		return nil, false
	}
	return &o.Var8, true
}

// HasVar8 returns a boolean if a field has been set.
func (o *Condition) HasVar8() bool {
	if o != nil && o.Var8 != nil {
		return true
	}

	return false
}

// SetVar8 gets a reference to the given interface{} and assigns it to the Var8 field.
func (o *Condition) SetVar8(v interface{}) {
	o.Var8 = v
}

// GetVar9 returns the Var9 field value if set, zero value otherwise.
func (o *Condition) GetVar9() ListValue {
	if o == nil || o.Var9 == nil {
		var ret ListValue
		return ret
	}
	return *o.Var9
}

// GetVar9Ok returns a tuple with the Var9 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar9Ok() (*ListValue, bool) {
	if o == nil || o.Var9 == nil {
		return nil, false
	}
	return o.Var9, true
}

// HasVar9 returns a boolean if a field has been set.
func (o *Condition) HasVar9() bool {
	if o != nil && o.Var9 != nil {
		return true
	}

	return false
}

// SetVar9 gets a reference to the given ListValue and assigns it to the Var9 field.
func (o *Condition) SetVar9(v ListValue) {
	o.Var9 = &v
}

// GetVar10 returns the Var10 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar10() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var10
}

// GetVar10Ok returns a tuple with the Var10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar10Ok() (*interface{}, bool) {
	if o == nil || o.Var10 == nil {
		return nil, false
	}
	return &o.Var10, true
}

// HasVar10 returns a boolean if a field has been set.
func (o *Condition) HasVar10() bool {
	if o != nil && o.Var10 != nil {
		return true
	}

	return false
}

// SetVar10 gets a reference to the given interface{} and assigns it to the Var10 field.
func (o *Condition) SetVar10(v interface{}) {
	o.Var10 = v
}

// GetVar11 returns the Var11 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar11() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var11
}

// GetVar11Ok returns a tuple with the Var11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar11Ok() (*interface{}, bool) {
	if o == nil || o.Var11 == nil {
		return nil, false
	}
	return &o.Var11, true
}

// HasVar11 returns a boolean if a field has been set.
func (o *Condition) HasVar11() bool {
	if o != nil && o.Var11 != nil {
		return true
	}

	return false
}

// SetVar11 gets a reference to the given interface{} and assigns it to the Var11 field.
func (o *Condition) SetVar11(v interface{}) {
	o.Var11 = v
}

// GetVar12 returns the Var12 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar12() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var12
}

// GetVar12Ok returns a tuple with the Var12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar12Ok() (*interface{}, bool) {
	if o == nil || o.Var12 == nil {
		return nil, false
	}
	return &o.Var12, true
}

// HasVar12 returns a boolean if a field has been set.
func (o *Condition) HasVar12() bool {
	if o != nil && o.Var12 != nil {
		return true
	}

	return false
}

// SetVar12 gets a reference to the given interface{} and assigns it to the Var12 field.
func (o *Condition) SetVar12(v interface{}) {
	o.Var12 = v
}

// GetVar13 returns the Var13 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar13() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var13
}

// GetVar13Ok returns a tuple with the Var13 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar13Ok() (*interface{}, bool) {
	if o == nil || o.Var13 == nil {
		return nil, false
	}
	return &o.Var13, true
}

// HasVar13 returns a boolean if a field has been set.
func (o *Condition) HasVar13() bool {
	if o != nil && o.Var13 != nil {
		return true
	}

	return false
}

// SetVar13 gets a reference to the given interface{} and assigns it to the Var13 field.
func (o *Condition) SetVar13(v interface{}) {
	o.Var13 = v
}

// GetVar14 returns the Var14 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Condition) GetVar14() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Var14
}

// GetVar14Ok returns a tuple with the Var14 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Condition) GetVar14Ok() (*interface{}, bool) {
	if o == nil || o.Var14 == nil {
		return nil, false
	}
	return &o.Var14, true
}

// HasVar14 returns a boolean if a field has been set.
func (o *Condition) HasVar14() bool {
	if o != nil && o.Var14 != nil {
		return true
	}

	return false
}

// SetVar14 gets a reference to the given interface{} and assigns it to the Var14 field.
func (o *Condition) SetVar14(v interface{}) {
	o.Var14 = v
}

// GetVar15 returns the Var15 field value if set, zero value otherwise.
func (o *Condition) GetVar15() StringValue {
	if o == nil || o.Var15 == nil {
		var ret StringValue
		return ret
	}
	return *o.Var15
}

// GetVar15Ok returns a tuple with the Var15 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar15Ok() (*StringValue, bool) {
	if o == nil || o.Var15 == nil {
		return nil, false
	}
	return o.Var15, true
}

// HasVar15 returns a boolean if a field has been set.
func (o *Condition) HasVar15() bool {
	if o != nil && o.Var15 != nil {
		return true
	}

	return false
}

// SetVar15 gets a reference to the given StringValue and assigns it to the Var15 field.
func (o *Condition) SetVar15(v StringValue) {
	o.Var15 = &v
}

// GetVar16 returns the Var16 field value if set, zero value otherwise.
func (o *Condition) GetVar16() StringValue {
	if o == nil || o.Var16 == nil {
		var ret StringValue
		return ret
	}
	return *o.Var16
}

// GetVar16Ok returns a tuple with the Var16 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar16Ok() (*StringValue, bool) {
	if o == nil || o.Var16 == nil {
		return nil, false
	}
	return o.Var16, true
}

// HasVar16 returns a boolean if a field has been set.
func (o *Condition) HasVar16() bool {
	if o != nil && o.Var16 != nil {
		return true
	}

	return false
}

// SetVar16 gets a reference to the given StringValue and assigns it to the Var16 field.
func (o *Condition) SetVar16(v StringValue) {
	o.Var16 = &v
}

// GetVar17 returns the Var17 field value if set, zero value otherwise.
func (o *Condition) GetVar17() ListValue {
	if o == nil || o.Var17 == nil {
		var ret ListValue
		return ret
	}
	return *o.Var17
}

// GetVar17Ok returns a tuple with the Var17 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar17Ok() (*ListValue, bool) {
	if o == nil || o.Var17 == nil {
		return nil, false
	}
	return o.Var17, true
}

// HasVar17 returns a boolean if a field has been set.
func (o *Condition) HasVar17() bool {
	if o != nil && o.Var17 != nil {
		return true
	}

	return false
}

// SetVar17 gets a reference to the given ListValue and assigns it to the Var17 field.
func (o *Condition) SetVar17(v ListValue) {
	o.Var17 = &v
}

// GetVar30 returns the Var30 field value if set, zero value otherwise.
func (o *Condition) GetVar30() string {
	if o == nil || o.Var30 == nil {
		var ret string
		return ret
	}
	return *o.Var30
}

// GetVar30Ok returns a tuple with the Var30 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar30Ok() (*string, bool) {
	if o == nil || o.Var30 == nil {
		return nil, false
	}
	return o.Var30, true
}

// HasVar30 returns a boolean if a field has been set.
func (o *Condition) HasVar30() bool {
	if o != nil && o.Var30 != nil {
		return true
	}

	return false
}

// SetVar30 gets a reference to the given string and assigns it to the Var30 field.
func (o *Condition) SetVar30(v string) {
	o.Var30 = &v
}

// GetVar31 returns the Var31 field value if set, zero value otherwise.
func (o *Condition) GetVar31() int32 {
	if o == nil || o.Var31 == nil {
		var ret int32
		return ret
	}
	return *o.Var31
}

// GetVar31Ok returns a tuple with the Var31 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar31Ok() (*int32, bool) {
	if o == nil || o.Var31 == nil {
		return nil, false
	}
	return o.Var31, true
}

// HasVar31 returns a boolean if a field has been set.
func (o *Condition) HasVar31() bool {
	if o != nil && o.Var31 != nil {
		return true
	}

	return false
}

// SetVar31 gets a reference to the given int32 and assigns it to the Var31 field.
func (o *Condition) SetVar31(v int32) {
	o.Var31 = &v
}

// GetVar32 returns the Var32 field value if set, zero value otherwise.
func (o *Condition) GetVar32() int32 {
	if o == nil || o.Var32 == nil {
		var ret int32
		return ret
	}
	return *o.Var32
}

// GetVar32Ok returns a tuple with the Var32 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetVar32Ok() (*int32, bool) {
	if o == nil || o.Var32 == nil {
		return nil, false
	}
	return o.Var32, true
}

// HasVar32 returns a boolean if a field has been set.
func (o *Condition) HasVar32() bool {
	if o != nil && o.Var32 != nil {
		return true
	}

	return false
}

// SetVar32 gets a reference to the given int32 and assigns it to the Var32 field.
func (o *Condition) SetVar32(v int32) {
	o.Var32 = &v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Var1 != nil {
		toSerialize["1"] = o.Var1
	}
	if o.Var2 != nil {
		toSerialize["2"] = o.Var2
	}
	if o.Var3 != nil {
		toSerialize["3"] = o.Var3
	}
	if o.Var4 != nil {
		toSerialize["4"] = o.Var4
	}
	if o.Var5 != nil {
		toSerialize["5"] = o.Var5
	}
	if o.Var6 != nil {
		toSerialize["6"] = o.Var6
	}
	if o.Var7 != nil {
		toSerialize["7"] = o.Var7
	}
	if o.Var8 != nil {
		toSerialize["8"] = o.Var8
	}
	if o.Var9 != nil {
		toSerialize["9"] = o.Var9
	}
	if o.Var10 != nil {
		toSerialize["10"] = o.Var10
	}
	if o.Var11 != nil {
		toSerialize["11"] = o.Var11
	}
	if o.Var12 != nil {
		toSerialize["12"] = o.Var12
	}
	if o.Var13 != nil {
		toSerialize["13"] = o.Var13
	}
	if o.Var14 != nil {
		toSerialize["14"] = o.Var14
	}
	if o.Var15 != nil {
		toSerialize["15"] = o.Var15
	}
	if o.Var16 != nil {
		toSerialize["16"] = o.Var16
	}
	if o.Var17 != nil {
		toSerialize["17"] = o.Var17
	}
	if o.Var30 != nil {
		toSerialize["30"] = o.Var30
	}
	if o.Var31 != nil {
		toSerialize["31"] = o.Var31
	}
	if o.Var32 != nil {
		toSerialize["32"] = o.Var32
	}
	return json.Marshal(toSerialize)
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


