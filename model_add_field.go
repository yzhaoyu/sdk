/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddField struct for AddField
type AddField struct {
	FieldTitle *string `json:"fieldTitle,omitempty"`
	FieldType *int32 `json:"fieldType,omitempty"`
	PropertyText map[string]interface{} `json:"propertyText,omitempty"`
	PropertyNumber *NumberFieldProperty `json:"propertyNumber,omitempty"`
	PropertyCheckbox *CheckboxFieldProperty `json:"propertyCheckbox,omitempty"`
	PropertyDateTime *DateTimeFieldProperty `json:"propertyDateTime,omitempty"`
	PropertyImage map[string]interface{} `json:"propertyImage,omitempty"`
	PropertyAttachment map[string]interface{} `json:"propertyAttachment,omitempty"`
	PropertyUser map[string]interface{} `json:"propertyUser,omitempty"`
	PropertyUrl *UrlFieldProperty `json:"propertyUrl,omitempty"`
	PropertySelect *SelectFieldProperty `json:"propertySelect,omitempty"`
	PropertyCreatedUser map[string]interface{} `json:"propertyCreatedUser,omitempty"`
	PropertyModifiedUser map[string]interface{} `json:"propertyModifiedUser,omitempty"`
	PropertyCreatedTime *CreatedTimeFieldProperty `json:"propertyCreatedTime,omitempty"`
	PropertyModifiedTime *ModifiedTimeFieldProperty `json:"propertyModifiedTime,omitempty"`
	PropertyProgress *ProgressFieldProperty `json:"propertyProgress,omitempty"`
	PropertyPhoneNumber map[string]interface{} `json:"propertyPhoneNumber,omitempty"`
	PropertyEmail map[string]interface{} `json:"propertyEmail,omitempty"`
	PropertySingleSelect *SingleSelectFieldProperty `json:"propertySingleSelect,omitempty"`
}

// NewAddField instantiates a new AddField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddField() *AddField {
	this := AddField{}
	return &this
}

// NewAddFieldWithDefaults instantiates a new AddField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddFieldWithDefaults() *AddField {
	this := AddField{}
	return &this
}

// GetFieldTitle returns the FieldTitle field value if set, zero value otherwise.
func (o *AddField) GetFieldTitle() string {
	if o == nil || o.FieldTitle == nil {
		var ret string
		return ret
	}
	return *o.FieldTitle
}

// GetFieldTitleOk returns a tuple with the FieldTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetFieldTitleOk() (*string, bool) {
	if o == nil || o.FieldTitle == nil {
		return nil, false
	}
	return o.FieldTitle, true
}

// HasFieldTitle returns a boolean if a field has been set.
func (o *AddField) HasFieldTitle() bool {
	if o != nil && o.FieldTitle != nil {
		return true
	}

	return false
}

// SetFieldTitle gets a reference to the given string and assigns it to the FieldTitle field.
func (o *AddField) SetFieldTitle(v string) {
	o.FieldTitle = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *AddField) GetFieldType() int32 {
	if o == nil || o.FieldType == nil {
		var ret int32
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetFieldTypeOk() (*int32, bool) {
	if o == nil || o.FieldType == nil {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *AddField) HasFieldType() bool {
	if o != nil && o.FieldType != nil {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given int32 and assigns it to the FieldType field.
func (o *AddField) SetFieldType(v int32) {
	o.FieldType = &v
}

// GetPropertyText returns the PropertyText field value if set, zero value otherwise.
func (o *AddField) GetPropertyText() map[string]interface{} {
	if o == nil || o.PropertyText == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyText
}

// GetPropertyTextOk returns a tuple with the PropertyText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyTextOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyText == nil {
		return nil, false
	}
	return o.PropertyText, true
}

// HasPropertyText returns a boolean if a field has been set.
func (o *AddField) HasPropertyText() bool {
	if o != nil && o.PropertyText != nil {
		return true
	}

	return false
}

// SetPropertyText gets a reference to the given map[string]interface{} and assigns it to the PropertyText field.
func (o *AddField) SetPropertyText(v map[string]interface{}) {
	o.PropertyText = v
}

// GetPropertyNumber returns the PropertyNumber field value if set, zero value otherwise.
func (o *AddField) GetPropertyNumber() NumberFieldProperty {
	if o == nil || o.PropertyNumber == nil {
		var ret NumberFieldProperty
		return ret
	}
	return *o.PropertyNumber
}

// GetPropertyNumberOk returns a tuple with the PropertyNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyNumberOk() (*NumberFieldProperty, bool) {
	if o == nil || o.PropertyNumber == nil {
		return nil, false
	}
	return o.PropertyNumber, true
}

// HasPropertyNumber returns a boolean if a field has been set.
func (o *AddField) HasPropertyNumber() bool {
	if o != nil && o.PropertyNumber != nil {
		return true
	}

	return false
}

// SetPropertyNumber gets a reference to the given NumberFieldProperty and assigns it to the PropertyNumber field.
func (o *AddField) SetPropertyNumber(v NumberFieldProperty) {
	o.PropertyNumber = &v
}

// GetPropertyCheckbox returns the PropertyCheckbox field value if set, zero value otherwise.
func (o *AddField) GetPropertyCheckbox() CheckboxFieldProperty {
	if o == nil || o.PropertyCheckbox == nil {
		var ret CheckboxFieldProperty
		return ret
	}
	return *o.PropertyCheckbox
}

// GetPropertyCheckboxOk returns a tuple with the PropertyCheckbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyCheckboxOk() (*CheckboxFieldProperty, bool) {
	if o == nil || o.PropertyCheckbox == nil {
		return nil, false
	}
	return o.PropertyCheckbox, true
}

// HasPropertyCheckbox returns a boolean if a field has been set.
func (o *AddField) HasPropertyCheckbox() bool {
	if o != nil && o.PropertyCheckbox != nil {
		return true
	}

	return false
}

// SetPropertyCheckbox gets a reference to the given CheckboxFieldProperty and assigns it to the PropertyCheckbox field.
func (o *AddField) SetPropertyCheckbox(v CheckboxFieldProperty) {
	o.PropertyCheckbox = &v
}

// GetPropertyDateTime returns the PropertyDateTime field value if set, zero value otherwise.
func (o *AddField) GetPropertyDateTime() DateTimeFieldProperty {
	if o == nil || o.PropertyDateTime == nil {
		var ret DateTimeFieldProperty
		return ret
	}
	return *o.PropertyDateTime
}

// GetPropertyDateTimeOk returns a tuple with the PropertyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyDateTimeOk() (*DateTimeFieldProperty, bool) {
	if o == nil || o.PropertyDateTime == nil {
		return nil, false
	}
	return o.PropertyDateTime, true
}

// HasPropertyDateTime returns a boolean if a field has been set.
func (o *AddField) HasPropertyDateTime() bool {
	if o != nil && o.PropertyDateTime != nil {
		return true
	}

	return false
}

// SetPropertyDateTime gets a reference to the given DateTimeFieldProperty and assigns it to the PropertyDateTime field.
func (o *AddField) SetPropertyDateTime(v DateTimeFieldProperty) {
	o.PropertyDateTime = &v
}

// GetPropertyImage returns the PropertyImage field value if set, zero value otherwise.
func (o *AddField) GetPropertyImage() map[string]interface{} {
	if o == nil || o.PropertyImage == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyImage
}

// GetPropertyImageOk returns a tuple with the PropertyImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyImageOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyImage == nil {
		return nil, false
	}
	return o.PropertyImage, true
}

// HasPropertyImage returns a boolean if a field has been set.
func (o *AddField) HasPropertyImage() bool {
	if o != nil && o.PropertyImage != nil {
		return true
	}

	return false
}

// SetPropertyImage gets a reference to the given map[string]interface{} and assigns it to the PropertyImage field.
func (o *AddField) SetPropertyImage(v map[string]interface{}) {
	o.PropertyImage = v
}

// GetPropertyAttachment returns the PropertyAttachment field value if set, zero value otherwise.
func (o *AddField) GetPropertyAttachment() map[string]interface{} {
	if o == nil || o.PropertyAttachment == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyAttachment
}

// GetPropertyAttachmentOk returns a tuple with the PropertyAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyAttachmentOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyAttachment == nil {
		return nil, false
	}
	return o.PropertyAttachment, true
}

// HasPropertyAttachment returns a boolean if a field has been set.
func (o *AddField) HasPropertyAttachment() bool {
	if o != nil && o.PropertyAttachment != nil {
		return true
	}

	return false
}

// SetPropertyAttachment gets a reference to the given map[string]interface{} and assigns it to the PropertyAttachment field.
func (o *AddField) SetPropertyAttachment(v map[string]interface{}) {
	o.PropertyAttachment = v
}

// GetPropertyUser returns the PropertyUser field value if set, zero value otherwise.
func (o *AddField) GetPropertyUser() map[string]interface{} {
	if o == nil || o.PropertyUser == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyUser
}

// GetPropertyUserOk returns a tuple with the PropertyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyUserOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyUser == nil {
		return nil, false
	}
	return o.PropertyUser, true
}

// HasPropertyUser returns a boolean if a field has been set.
func (o *AddField) HasPropertyUser() bool {
	if o != nil && o.PropertyUser != nil {
		return true
	}

	return false
}

// SetPropertyUser gets a reference to the given map[string]interface{} and assigns it to the PropertyUser field.
func (o *AddField) SetPropertyUser(v map[string]interface{}) {
	o.PropertyUser = v
}

// GetPropertyUrl returns the PropertyUrl field value if set, zero value otherwise.
func (o *AddField) GetPropertyUrl() UrlFieldProperty {
	if o == nil || o.PropertyUrl == nil {
		var ret UrlFieldProperty
		return ret
	}
	return *o.PropertyUrl
}

// GetPropertyUrlOk returns a tuple with the PropertyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyUrlOk() (*UrlFieldProperty, bool) {
	if o == nil || o.PropertyUrl == nil {
		return nil, false
	}
	return o.PropertyUrl, true
}

// HasPropertyUrl returns a boolean if a field has been set.
func (o *AddField) HasPropertyUrl() bool {
	if o != nil && o.PropertyUrl != nil {
		return true
	}

	return false
}

// SetPropertyUrl gets a reference to the given UrlFieldProperty and assigns it to the PropertyUrl field.
func (o *AddField) SetPropertyUrl(v UrlFieldProperty) {
	o.PropertyUrl = &v
}

// GetPropertySelect returns the PropertySelect field value if set, zero value otherwise.
func (o *AddField) GetPropertySelect() SelectFieldProperty {
	if o == nil || o.PropertySelect == nil {
		var ret SelectFieldProperty
		return ret
	}
	return *o.PropertySelect
}

// GetPropertySelectOk returns a tuple with the PropertySelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertySelectOk() (*SelectFieldProperty, bool) {
	if o == nil || o.PropertySelect == nil {
		return nil, false
	}
	return o.PropertySelect, true
}

// HasPropertySelect returns a boolean if a field has been set.
func (o *AddField) HasPropertySelect() bool {
	if o != nil && o.PropertySelect != nil {
		return true
	}

	return false
}

// SetPropertySelect gets a reference to the given SelectFieldProperty and assigns it to the PropertySelect field.
func (o *AddField) SetPropertySelect(v SelectFieldProperty) {
	o.PropertySelect = &v
}

// GetPropertyCreatedUser returns the PropertyCreatedUser field value if set, zero value otherwise.
func (o *AddField) GetPropertyCreatedUser() map[string]interface{} {
	if o == nil || o.PropertyCreatedUser == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyCreatedUser
}

// GetPropertyCreatedUserOk returns a tuple with the PropertyCreatedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyCreatedUserOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyCreatedUser == nil {
		return nil, false
	}
	return o.PropertyCreatedUser, true
}

// HasPropertyCreatedUser returns a boolean if a field has been set.
func (o *AddField) HasPropertyCreatedUser() bool {
	if o != nil && o.PropertyCreatedUser != nil {
		return true
	}

	return false
}

// SetPropertyCreatedUser gets a reference to the given map[string]interface{} and assigns it to the PropertyCreatedUser field.
func (o *AddField) SetPropertyCreatedUser(v map[string]interface{}) {
	o.PropertyCreatedUser = v
}

// GetPropertyModifiedUser returns the PropertyModifiedUser field value if set, zero value otherwise.
func (o *AddField) GetPropertyModifiedUser() map[string]interface{} {
	if o == nil || o.PropertyModifiedUser == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyModifiedUser
}

// GetPropertyModifiedUserOk returns a tuple with the PropertyModifiedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyModifiedUserOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyModifiedUser == nil {
		return nil, false
	}
	return o.PropertyModifiedUser, true
}

// HasPropertyModifiedUser returns a boolean if a field has been set.
func (o *AddField) HasPropertyModifiedUser() bool {
	if o != nil && o.PropertyModifiedUser != nil {
		return true
	}

	return false
}

// SetPropertyModifiedUser gets a reference to the given map[string]interface{} and assigns it to the PropertyModifiedUser field.
func (o *AddField) SetPropertyModifiedUser(v map[string]interface{}) {
	o.PropertyModifiedUser = v
}

// GetPropertyCreatedTime returns the PropertyCreatedTime field value if set, zero value otherwise.
func (o *AddField) GetPropertyCreatedTime() CreatedTimeFieldProperty {
	if o == nil || o.PropertyCreatedTime == nil {
		var ret CreatedTimeFieldProperty
		return ret
	}
	return *o.PropertyCreatedTime
}

// GetPropertyCreatedTimeOk returns a tuple with the PropertyCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyCreatedTimeOk() (*CreatedTimeFieldProperty, bool) {
	if o == nil || o.PropertyCreatedTime == nil {
		return nil, false
	}
	return o.PropertyCreatedTime, true
}

// HasPropertyCreatedTime returns a boolean if a field has been set.
func (o *AddField) HasPropertyCreatedTime() bool {
	if o != nil && o.PropertyCreatedTime != nil {
		return true
	}

	return false
}

// SetPropertyCreatedTime gets a reference to the given CreatedTimeFieldProperty and assigns it to the PropertyCreatedTime field.
func (o *AddField) SetPropertyCreatedTime(v CreatedTimeFieldProperty) {
	o.PropertyCreatedTime = &v
}

// GetPropertyModifiedTime returns the PropertyModifiedTime field value if set, zero value otherwise.
func (o *AddField) GetPropertyModifiedTime() ModifiedTimeFieldProperty {
	if o == nil || o.PropertyModifiedTime == nil {
		var ret ModifiedTimeFieldProperty
		return ret
	}
	return *o.PropertyModifiedTime
}

// GetPropertyModifiedTimeOk returns a tuple with the PropertyModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyModifiedTimeOk() (*ModifiedTimeFieldProperty, bool) {
	if o == nil || o.PropertyModifiedTime == nil {
		return nil, false
	}
	return o.PropertyModifiedTime, true
}

// HasPropertyModifiedTime returns a boolean if a field has been set.
func (o *AddField) HasPropertyModifiedTime() bool {
	if o != nil && o.PropertyModifiedTime != nil {
		return true
	}

	return false
}

// SetPropertyModifiedTime gets a reference to the given ModifiedTimeFieldProperty and assigns it to the PropertyModifiedTime field.
func (o *AddField) SetPropertyModifiedTime(v ModifiedTimeFieldProperty) {
	o.PropertyModifiedTime = &v
}

// GetPropertyProgress returns the PropertyProgress field value if set, zero value otherwise.
func (o *AddField) GetPropertyProgress() ProgressFieldProperty {
	if o == nil || o.PropertyProgress == nil {
		var ret ProgressFieldProperty
		return ret
	}
	return *o.PropertyProgress
}

// GetPropertyProgressOk returns a tuple with the PropertyProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyProgressOk() (*ProgressFieldProperty, bool) {
	if o == nil || o.PropertyProgress == nil {
		return nil, false
	}
	return o.PropertyProgress, true
}

// HasPropertyProgress returns a boolean if a field has been set.
func (o *AddField) HasPropertyProgress() bool {
	if o != nil && o.PropertyProgress != nil {
		return true
	}

	return false
}

// SetPropertyProgress gets a reference to the given ProgressFieldProperty and assigns it to the PropertyProgress field.
func (o *AddField) SetPropertyProgress(v ProgressFieldProperty) {
	o.PropertyProgress = &v
}

// GetPropertyPhoneNumber returns the PropertyPhoneNumber field value if set, zero value otherwise.
func (o *AddField) GetPropertyPhoneNumber() map[string]interface{} {
	if o == nil || o.PropertyPhoneNumber == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyPhoneNumber
}

// GetPropertyPhoneNumberOk returns a tuple with the PropertyPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyPhoneNumberOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyPhoneNumber == nil {
		return nil, false
	}
	return o.PropertyPhoneNumber, true
}

// HasPropertyPhoneNumber returns a boolean if a field has been set.
func (o *AddField) HasPropertyPhoneNumber() bool {
	if o != nil && o.PropertyPhoneNumber != nil {
		return true
	}

	return false
}

// SetPropertyPhoneNumber gets a reference to the given map[string]interface{} and assigns it to the PropertyPhoneNumber field.
func (o *AddField) SetPropertyPhoneNumber(v map[string]interface{}) {
	o.PropertyPhoneNumber = v
}

// GetPropertyEmail returns the PropertyEmail field value if set, zero value otherwise.
func (o *AddField) GetPropertyEmail() map[string]interface{} {
	if o == nil || o.PropertyEmail == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertyEmail
}

// GetPropertyEmailOk returns a tuple with the PropertyEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertyEmailOk() (map[string]interface{}, bool) {
	if o == nil || o.PropertyEmail == nil {
		return nil, false
	}
	return o.PropertyEmail, true
}

// HasPropertyEmail returns a boolean if a field has been set.
func (o *AddField) HasPropertyEmail() bool {
	if o != nil && o.PropertyEmail != nil {
		return true
	}

	return false
}

// SetPropertyEmail gets a reference to the given map[string]interface{} and assigns it to the PropertyEmail field.
func (o *AddField) SetPropertyEmail(v map[string]interface{}) {
	o.PropertyEmail = v
}

// GetPropertySingleSelect returns the PropertySingleSelect field value if set, zero value otherwise.
func (o *AddField) GetPropertySingleSelect() SingleSelectFieldProperty {
	if o == nil || o.PropertySingleSelect == nil {
		var ret SingleSelectFieldProperty
		return ret
	}
	return *o.PropertySingleSelect
}

// GetPropertySingleSelectOk returns a tuple with the PropertySingleSelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddField) GetPropertySingleSelectOk() (*SingleSelectFieldProperty, bool) {
	if o == nil || o.PropertySingleSelect == nil {
		return nil, false
	}
	return o.PropertySingleSelect, true
}

// HasPropertySingleSelect returns a boolean if a field has been set.
func (o *AddField) HasPropertySingleSelect() bool {
	if o != nil && o.PropertySingleSelect != nil {
		return true
	}

	return false
}

// SetPropertySingleSelect gets a reference to the given SingleSelectFieldProperty and assigns it to the PropertySingleSelect field.
func (o *AddField) SetPropertySingleSelect(v SingleSelectFieldProperty) {
	o.PropertySingleSelect = &v
}

func (o AddField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldTitle != nil {
		toSerialize["fieldTitle"] = o.FieldTitle
	}
	if o.FieldType != nil {
		toSerialize["fieldType"] = o.FieldType
	}
	if o.PropertyText != nil {
		toSerialize["propertyText"] = o.PropertyText
	}
	if o.PropertyNumber != nil {
		toSerialize["propertyNumber"] = o.PropertyNumber
	}
	if o.PropertyCheckbox != nil {
		toSerialize["propertyCheckbox"] = o.PropertyCheckbox
	}
	if o.PropertyDateTime != nil {
		toSerialize["propertyDateTime"] = o.PropertyDateTime
	}
	if o.PropertyImage != nil {
		toSerialize["propertyImage"] = o.PropertyImage
	}
	if o.PropertyAttachment != nil {
		toSerialize["propertyAttachment"] = o.PropertyAttachment
	}
	if o.PropertyUser != nil {
		toSerialize["propertyUser"] = o.PropertyUser
	}
	if o.PropertyUrl != nil {
		toSerialize["propertyUrl"] = o.PropertyUrl
	}
	if o.PropertySelect != nil {
		toSerialize["propertySelect"] = o.PropertySelect
	}
	if o.PropertyCreatedUser != nil {
		toSerialize["propertyCreatedUser"] = o.PropertyCreatedUser
	}
	if o.PropertyModifiedUser != nil {
		toSerialize["propertyModifiedUser"] = o.PropertyModifiedUser
	}
	if o.PropertyCreatedTime != nil {
		toSerialize["propertyCreatedTime"] = o.PropertyCreatedTime
	}
	if o.PropertyModifiedTime != nil {
		toSerialize["propertyModifiedTime"] = o.PropertyModifiedTime
	}
	if o.PropertyProgress != nil {
		toSerialize["propertyProgress"] = o.PropertyProgress
	}
	if o.PropertyPhoneNumber != nil {
		toSerialize["propertyPhoneNumber"] = o.PropertyPhoneNumber
	}
	if o.PropertyEmail != nil {
		toSerialize["propertyEmail"] = o.PropertyEmail
	}
	if o.PropertySingleSelect != nil {
		toSerialize["propertySingleSelect"] = o.PropertySingleSelect
	}
	return json.Marshal(toSerialize)
}

type NullableAddField struct {
	value *AddField
	isSet bool
}

func (v NullableAddField) Get() *AddField {
	return v.value
}

func (v *NullableAddField) Set(val *AddField) {
	v.value = val
	v.isSet = true
}

func (v NullableAddField) IsSet() bool {
	return v.isSet
}

func (v *NullableAddField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddField(val *AddField) *NullableAddField {
	return &NullableAddField{value: val, isSet: true}
}

func (v NullableAddField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


