/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddViewResponse 新建视图回包
type AddViewResponse struct {
	View *ViewResource `json:"view,omitempty"`
}

// NewAddViewResponse instantiates a new AddViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddViewResponse() *AddViewResponse {
	this := AddViewResponse{}
	return &this
}

// NewAddViewResponseWithDefaults instantiates a new AddViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddViewResponseWithDefaults() *AddViewResponse {
	this := AddViewResponse{}
	return &this
}

// GetView returns the View field value if set, zero value otherwise.
func (o *AddViewResponse) GetView() ViewResource {
	if o == nil || o.View == nil {
		var ret ViewResource
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddViewResponse) GetViewOk() (*ViewResource, bool) {
	if o == nil || o.View == nil {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *AddViewResponse) HasView() bool {
	if o != nil && o.View != nil {
		return true
	}

	return false
}

// SetView gets a reference to the given ViewResource and assigns it to the View field.
func (o *AddViewResponse) SetView(v ViewResource) {
	o.View = &v
}

func (o AddViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.View != nil {
		toSerialize["view"] = o.View
	}
	return json.Marshal(toSerialize)
}

type NullableAddViewResponse struct {
	value *AddViewResponse
	isSet bool
}

func (v NullableAddViewResponse) Get() *AddViewResponse {
	return v.value
}

func (v *NullableAddViewResponse) Set(val *AddViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAddViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAddViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddViewResponse(val *AddViewResponse) *NullableAddViewResponse {
	return &NullableAddViewResponse{value: val, isSet: true}
}

func (v NullableAddViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


