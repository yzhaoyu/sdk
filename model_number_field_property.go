/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NumberFieldProperty struct for NumberFieldProperty
type NumberFieldProperty struct {
	DecimalPlaces *int32 `json:"decimalPlaces,omitempty"`
	UseSeparate *bool `json:"useSeparate,omitempty"`
}

// NewNumberFieldProperty instantiates a new NumberFieldProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberFieldProperty() *NumberFieldProperty {
	this := NumberFieldProperty{}
	return &this
}

// NewNumberFieldPropertyWithDefaults instantiates a new NumberFieldProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberFieldPropertyWithDefaults() *NumberFieldProperty {
	this := NumberFieldProperty{}
	return &this
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *NumberFieldProperty) GetDecimalPlaces() int32 {
	if o == nil || o.DecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldProperty) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.DecimalPlaces == nil {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *NumberFieldProperty) HasDecimalPlaces() bool {
	if o != nil && o.DecimalPlaces != nil {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *NumberFieldProperty) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

// GetUseSeparate returns the UseSeparate field value if set, zero value otherwise.
func (o *NumberFieldProperty) GetUseSeparate() bool {
	if o == nil || o.UseSeparate == nil {
		var ret bool
		return ret
	}
	return *o.UseSeparate
}

// GetUseSeparateOk returns a tuple with the UseSeparate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberFieldProperty) GetUseSeparateOk() (*bool, bool) {
	if o == nil || o.UseSeparate == nil {
		return nil, false
	}
	return o.UseSeparate, true
}

// HasUseSeparate returns a boolean if a field has been set.
func (o *NumberFieldProperty) HasUseSeparate() bool {
	if o != nil && o.UseSeparate != nil {
		return true
	}

	return false
}

// SetUseSeparate gets a reference to the given bool and assigns it to the UseSeparate field.
func (o *NumberFieldProperty) SetUseSeparate(v bool) {
	o.UseSeparate = &v
}

func (o NumberFieldProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DecimalPlaces != nil {
		toSerialize["decimalPlaces"] = o.DecimalPlaces
	}
	if o.UseSeparate != nil {
		toSerialize["useSeparate"] = o.UseSeparate
	}
	return json.Marshal(toSerialize)
}

type NullableNumberFieldProperty struct {
	value *NumberFieldProperty
	isSet bool
}

func (v NullableNumberFieldProperty) Get() *NumberFieldProperty {
	return v.value
}

func (v *NullableNumberFieldProperty) Set(val *NumberFieldProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberFieldProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberFieldProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberFieldProperty(val *NumberFieldProperty) *NullableNumberFieldProperty {
	return &NullableNumberFieldProperty{value: val, isSet: true}
}

func (v NullableNumberFieldProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberFieldProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


