/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartsheetCommonRecord struct for SmartsheetCommonRecord
type SmartsheetCommonRecord struct {
	RecordID *string `json:"recordID,omitempty"`
	Values *map[string]interface{} `json:"values,omitempty"`
}

// NewSmartsheetCommonRecord instantiates a new SmartsheetCommonRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartsheetCommonRecord() *SmartsheetCommonRecord {
	this := SmartsheetCommonRecord{}
	return &this
}

// NewSmartsheetCommonRecordWithDefaults instantiates a new SmartsheetCommonRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartsheetCommonRecordWithDefaults() *SmartsheetCommonRecord {
	this := SmartsheetCommonRecord{}
	return &this
}

// GetRecordID returns the RecordID field value if set, zero value otherwise.
func (o *SmartsheetCommonRecord) GetRecordID() string {
	if o == nil || o.RecordID == nil {
		var ret string
		return ret
	}
	return *o.RecordID
}

// GetRecordIDOk returns a tuple with the RecordID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartsheetCommonRecord) GetRecordIDOk() (*string, bool) {
	if o == nil || o.RecordID == nil {
		return nil, false
	}
	return o.RecordID, true
}

// HasRecordID returns a boolean if a field has been set.
func (o *SmartsheetCommonRecord) HasRecordID() bool {
	if o != nil && o.RecordID != nil {
		return true
	}

	return false
}

// SetRecordID gets a reference to the given string and assigns it to the RecordID field.
func (o *SmartsheetCommonRecord) SetRecordID(v string) {
	o.RecordID = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *SmartsheetCommonRecord) GetValues() map[string]interface{} {
	if o == nil || o.Values == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartsheetCommonRecord) GetValuesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *SmartsheetCommonRecord) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]interface{} and assigns it to the Values field.
func (o *SmartsheetCommonRecord) SetValues(v map[string]interface{}) {
	o.Values = &v
}

func (o SmartsheetCommonRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecordID != nil {
		toSerialize["recordID"] = o.RecordID
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableSmartsheetCommonRecord struct {
	value *SmartsheetCommonRecord
	isSet bool
}

func (v NullableSmartsheetCommonRecord) Get() *SmartsheetCommonRecord {
	return v.value
}

func (v *NullableSmartsheetCommonRecord) Set(val *SmartsheetCommonRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartsheetCommonRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartsheetCommonRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartsheetCommonRecord(val *SmartsheetCommonRecord) *NullableSmartsheetCommonRecord {
	return &NullableSmartsheetCommonRecord{value: val, isSet: true}
}

func (v NullableSmartsheetCommonRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartsheetCommonRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


