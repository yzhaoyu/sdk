/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartsheetentityView struct for SmartsheetentityView
type SmartsheetentityView struct {
	ViewID *string `json:"viewID,omitempty"`
	ViewTitle *string `json:"viewTitle,omitempty"`
	ViewType *string `json:"viewType,omitempty"`
}

// NewSmartsheetentityView instantiates a new SmartsheetentityView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartsheetentityView() *SmartsheetentityView {
	this := SmartsheetentityView{}
	return &this
}

// NewSmartsheetentityViewWithDefaults instantiates a new SmartsheetentityView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartsheetentityViewWithDefaults() *SmartsheetentityView {
	this := SmartsheetentityView{}
	return &this
}

// GetViewID returns the ViewID field value if set, zero value otherwise.
func (o *SmartsheetentityView) GetViewID() string {
	if o == nil || o.ViewID == nil {
		var ret string
		return ret
	}
	return *o.ViewID
}

// GetViewIDOk returns a tuple with the ViewID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartsheetentityView) GetViewIDOk() (*string, bool) {
	if o == nil || o.ViewID == nil {
		return nil, false
	}
	return o.ViewID, true
}

// HasViewID returns a boolean if a field has been set.
func (o *SmartsheetentityView) HasViewID() bool {
	if o != nil && o.ViewID != nil {
		return true
	}

	return false
}

// SetViewID gets a reference to the given string and assigns it to the ViewID field.
func (o *SmartsheetentityView) SetViewID(v string) {
	o.ViewID = &v
}

// GetViewTitle returns the ViewTitle field value if set, zero value otherwise.
func (o *SmartsheetentityView) GetViewTitle() string {
	if o == nil || o.ViewTitle == nil {
		var ret string
		return ret
	}
	return *o.ViewTitle
}

// GetViewTitleOk returns a tuple with the ViewTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartsheetentityView) GetViewTitleOk() (*string, bool) {
	if o == nil || o.ViewTitle == nil {
		return nil, false
	}
	return o.ViewTitle, true
}

// HasViewTitle returns a boolean if a field has been set.
func (o *SmartsheetentityView) HasViewTitle() bool {
	if o != nil && o.ViewTitle != nil {
		return true
	}

	return false
}

// SetViewTitle gets a reference to the given string and assigns it to the ViewTitle field.
func (o *SmartsheetentityView) SetViewTitle(v string) {
	o.ViewTitle = &v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *SmartsheetentityView) GetViewType() string {
	if o == nil || o.ViewType == nil {
		var ret string
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartsheetentityView) GetViewTypeOk() (*string, bool) {
	if o == nil || o.ViewType == nil {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *SmartsheetentityView) HasViewType() bool {
	if o != nil && o.ViewType != nil {
		return true
	}

	return false
}

// SetViewType gets a reference to the given string and assigns it to the ViewType field.
func (o *SmartsheetentityView) SetViewType(v string) {
	o.ViewType = &v
}

func (o SmartsheetentityView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewID != nil {
		toSerialize["viewID"] = o.ViewID
	}
	if o.ViewTitle != nil {
		toSerialize["viewTitle"] = o.ViewTitle
	}
	if o.ViewType != nil {
		toSerialize["viewType"] = o.ViewType
	}
	return json.Marshal(toSerialize)
}

type NullableSmartsheetentityView struct {
	value *SmartsheetentityView
	isSet bool
}

func (v NullableSmartsheetentityView) Get() *SmartsheetentityView {
	return v.value
}

func (v *NullableSmartsheetentityView) Set(val *SmartsheetentityView) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartsheetentityView) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartsheetentityView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartsheetentityView(val *SmartsheetentityView) *NullableSmartsheetentityView {
	return &NullableSmartsheetentityView{value: val, isSet: true}
}

func (v NullableSmartsheetentityView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartsheetentityView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


