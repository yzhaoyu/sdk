/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// OAuthAPIApiService OAuthAPIApi service
type OAuthAPIApiService service

type ApiOAuthAPIGetTokenRequest struct {
	ctx context.Context
	ApiService *OAuthAPIApiService
	clientId *string
	clientSecret *string
	redirectUri *string
	grantType *string
	code *string
}

func (r ApiOAuthAPIGetTokenRequest) ClientId(clientId string) ApiOAuthAPIGetTokenRequest {
	r.clientId = &clientId
	return r
}

func (r ApiOAuthAPIGetTokenRequest) ClientSecret(clientSecret string) ApiOAuthAPIGetTokenRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiOAuthAPIGetTokenRequest) RedirectUri(redirectUri string) ApiOAuthAPIGetTokenRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r ApiOAuthAPIGetTokenRequest) GrantType(grantType string) ApiOAuthAPIGetTokenRequest {
	r.grantType = &grantType
	return r
}

func (r ApiOAuthAPIGetTokenRequest) Code(code string) ApiOAuthAPIGetTokenRequest {
	r.code = &code
	return r
}

func (r ApiOAuthAPIGetTokenRequest) Execute() (*OAuthAPIResponse1, *http.Response, error) {
	return r.ApiService.OAuthAPIGetTokenExecute(r)
}

/*
OAuthAPIGetToken Method for OAuthAPIGetToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOAuthAPIGetTokenRequest
*/
func (a *OAuthAPIApiService) OAuthAPIGetToken(ctx context.Context) ApiOAuthAPIGetTokenRequest {
	return ApiOAuthAPIGetTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OAuthAPIResponse1
func (a *OAuthAPIApiService) OAuthAPIGetTokenExecute(r ApiOAuthAPIGetTokenRequest) (*OAuthAPIResponse1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OAuthAPIResponse1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthAPIApiService.OAuthAPIGetToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/v2/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.clientSecret != nil {
		localVarQueryParams.Add("client_secret", parameterToString(*r.clientSecret, ""))
	}
	if r.redirectUri != nil {
		localVarQueryParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	}
	if r.grantType != nil {
		localVarQueryParams.Add("grant_type", parameterToString(*r.grantType, ""))
	}
	if r.code != nil {
		localVarQueryParams.Add("code", parameterToString(*r.code, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOAuthAPIRefreshTokenRequest struct {
	ctx context.Context
	ApiService *OAuthAPIApiService
	clientId *string
	clientSecret *string
	grantType *string
	refreshToken *string
}

func (r ApiOAuthAPIRefreshTokenRequest) ClientId(clientId string) ApiOAuthAPIRefreshTokenRequest {
	r.clientId = &clientId
	return r
}

func (r ApiOAuthAPIRefreshTokenRequest) ClientSecret(clientSecret string) ApiOAuthAPIRefreshTokenRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiOAuthAPIRefreshTokenRequest) GrantType(grantType string) ApiOAuthAPIRefreshTokenRequest {
	r.grantType = &grantType
	return r
}

func (r ApiOAuthAPIRefreshTokenRequest) RefreshToken(refreshToken string) ApiOAuthAPIRefreshTokenRequest {
	r.refreshToken = &refreshToken
	return r
}

func (r ApiOAuthAPIRefreshTokenRequest) Execute() (*OAuthAPIResponse3, *http.Response, error) {
	return r.ApiService.OAuthAPIRefreshTokenExecute(r)
}

/*
OAuthAPIRefreshToken Method for OAuthAPIRefreshToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOAuthAPIRefreshTokenRequest
*/
func (a *OAuthAPIApiService) OAuthAPIRefreshToken(ctx context.Context) ApiOAuthAPIRefreshTokenRequest {
	return ApiOAuthAPIRefreshTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OAuthAPIResponse3
func (a *OAuthAPIApiService) OAuthAPIRefreshTokenExecute(r ApiOAuthAPIRefreshTokenRequest) (*OAuthAPIResponse3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OAuthAPIResponse3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuthAPIApiService.OAuthAPIRefreshToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/v2/userinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.clientSecret != nil {
		localVarQueryParams.Add("client_secret", parameterToString(*r.clientSecret, ""))
	}
	if r.grantType != nil {
		localVarQueryParams.Add("grant_type", parameterToString(*r.grantType, ""))
	}
	if r.refreshToken != nil {
		localVarQueryParams.Add("refresh_token", parameterToString(*r.refreshToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
