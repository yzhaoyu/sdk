/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com/open/wiki); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Request struct for Request
type Request struct {
	ReplaceText *ReplaceTextRequest `json:"replaceText,omitempty"`
	InsertText *InsertTextRequest `json:"insertText,omitempty"`
	DeleteContent *DeleteContentRequest `json:"deleteContent,omitempty"`
	InsertImage *InsertImageRequest `json:"insertImage,omitempty"`
	InsertPageBreak *InsertPageBreakRequest `json:"insertPageBreak,omitempty"`
	InsertTable *InsertTableRequest `json:"insertTable,omitempty"`
	InsertNumbering *InsertNumberingRequest `json:"insertNumbering,omitempty"`
	InsertWebBlock *InsertWebBlockRequest `json:"insertWebBlock,omitempty"`
}

// NewRequest instantiates a new Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequest() *Request {
	this := Request{}
	return &this
}

// NewRequestWithDefaults instantiates a new Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestWithDefaults() *Request {
	this := Request{}
	return &this
}

// GetReplaceText returns the ReplaceText field value if set, zero value otherwise.
func (o *Request) GetReplaceText() ReplaceTextRequest {
	if o == nil || o.ReplaceText == nil {
		var ret ReplaceTextRequest
		return ret
	}
	return *o.ReplaceText
}

// GetReplaceTextOk returns a tuple with the ReplaceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetReplaceTextOk() (*ReplaceTextRequest, bool) {
	if o == nil || o.ReplaceText == nil {
		return nil, false
	}
	return o.ReplaceText, true
}

// HasReplaceText returns a boolean if a field has been set.
func (o *Request) HasReplaceText() bool {
	if o != nil && o.ReplaceText != nil {
		return true
	}

	return false
}

// SetReplaceText gets a reference to the given ReplaceTextRequest and assigns it to the ReplaceText field.
func (o *Request) SetReplaceText(v ReplaceTextRequest) {
	o.ReplaceText = &v
}

// GetInsertText returns the InsertText field value if set, zero value otherwise.
func (o *Request) GetInsertText() InsertTextRequest {
	if o == nil || o.InsertText == nil {
		var ret InsertTextRequest
		return ret
	}
	return *o.InsertText
}

// GetInsertTextOk returns a tuple with the InsertText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetInsertTextOk() (*InsertTextRequest, bool) {
	if o == nil || o.InsertText == nil {
		return nil, false
	}
	return o.InsertText, true
}

// HasInsertText returns a boolean if a field has been set.
func (o *Request) HasInsertText() bool {
	if o != nil && o.InsertText != nil {
		return true
	}

	return false
}

// SetInsertText gets a reference to the given InsertTextRequest and assigns it to the InsertText field.
func (o *Request) SetInsertText(v InsertTextRequest) {
	o.InsertText = &v
}

// GetDeleteContent returns the DeleteContent field value if set, zero value otherwise.
func (o *Request) GetDeleteContent() DeleteContentRequest {
	if o == nil || o.DeleteContent == nil {
		var ret DeleteContentRequest
		return ret
	}
	return *o.DeleteContent
}

// GetDeleteContentOk returns a tuple with the DeleteContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetDeleteContentOk() (*DeleteContentRequest, bool) {
	if o == nil || o.DeleteContent == nil {
		return nil, false
	}
	return o.DeleteContent, true
}

// HasDeleteContent returns a boolean if a field has been set.
func (o *Request) HasDeleteContent() bool {
	if o != nil && o.DeleteContent != nil {
		return true
	}

	return false
}

// SetDeleteContent gets a reference to the given DeleteContentRequest and assigns it to the DeleteContent field.
func (o *Request) SetDeleteContent(v DeleteContentRequest) {
	o.DeleteContent = &v
}

// GetInsertImage returns the InsertImage field value if set, zero value otherwise.
func (o *Request) GetInsertImage() InsertImageRequest {
	if o == nil || o.InsertImage == nil {
		var ret InsertImageRequest
		return ret
	}
	return *o.InsertImage
}

// GetInsertImageOk returns a tuple with the InsertImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetInsertImageOk() (*InsertImageRequest, bool) {
	if o == nil || o.InsertImage == nil {
		return nil, false
	}
	return o.InsertImage, true
}

// HasInsertImage returns a boolean if a field has been set.
func (o *Request) HasInsertImage() bool {
	if o != nil && o.InsertImage != nil {
		return true
	}

	return false
}

// SetInsertImage gets a reference to the given InsertImageRequest and assigns it to the InsertImage field.
func (o *Request) SetInsertImage(v InsertImageRequest) {
	o.InsertImage = &v
}

// GetInsertPageBreak returns the InsertPageBreak field value if set, zero value otherwise.
func (o *Request) GetInsertPageBreak() InsertPageBreakRequest {
	if o == nil || o.InsertPageBreak == nil {
		var ret InsertPageBreakRequest
		return ret
	}
	return *o.InsertPageBreak
}

// GetInsertPageBreakOk returns a tuple with the InsertPageBreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetInsertPageBreakOk() (*InsertPageBreakRequest, bool) {
	if o == nil || o.InsertPageBreak == nil {
		return nil, false
	}
	return o.InsertPageBreak, true
}

// HasInsertPageBreak returns a boolean if a field has been set.
func (o *Request) HasInsertPageBreak() bool {
	if o != nil && o.InsertPageBreak != nil {
		return true
	}

	return false
}

// SetInsertPageBreak gets a reference to the given InsertPageBreakRequest and assigns it to the InsertPageBreak field.
func (o *Request) SetInsertPageBreak(v InsertPageBreakRequest) {
	o.InsertPageBreak = &v
}

// GetInsertTable returns the InsertTable field value if set, zero value otherwise.
func (o *Request) GetInsertTable() InsertTableRequest {
	if o == nil || o.InsertTable == nil {
		var ret InsertTableRequest
		return ret
	}
	return *o.InsertTable
}

// GetInsertTableOk returns a tuple with the InsertTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetInsertTableOk() (*InsertTableRequest, bool) {
	if o == nil || o.InsertTable == nil {
		return nil, false
	}
	return o.InsertTable, true
}

// HasInsertTable returns a boolean if a field has been set.
func (o *Request) HasInsertTable() bool {
	if o != nil && o.InsertTable != nil {
		return true
	}

	return false
}

// SetInsertTable gets a reference to the given InsertTableRequest and assigns it to the InsertTable field.
func (o *Request) SetInsertTable(v InsertTableRequest) {
	o.InsertTable = &v
}

// GetInsertNumbering returns the InsertNumbering field value if set, zero value otherwise.
func (o *Request) GetInsertNumbering() InsertNumberingRequest {
	if o == nil || o.InsertNumbering == nil {
		var ret InsertNumberingRequest
		return ret
	}
	return *o.InsertNumbering
}

// GetInsertNumberingOk returns a tuple with the InsertNumbering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetInsertNumberingOk() (*InsertNumberingRequest, bool) {
	if o == nil || o.InsertNumbering == nil {
		return nil, false
	}
	return o.InsertNumbering, true
}

// HasInsertNumbering returns a boolean if a field has been set.
func (o *Request) HasInsertNumbering() bool {
	if o != nil && o.InsertNumbering != nil {
		return true
	}

	return false
}

// SetInsertNumbering gets a reference to the given InsertNumberingRequest and assigns it to the InsertNumbering field.
func (o *Request) SetInsertNumbering(v InsertNumberingRequest) {
	o.InsertNumbering = &v
}

// GetInsertWebBlock returns the InsertWebBlock field value if set, zero value otherwise.
func (o *Request) GetInsertWebBlock() InsertWebBlockRequest {
	if o == nil || o.InsertWebBlock == nil {
		var ret InsertWebBlockRequest
		return ret
	}
	return *o.InsertWebBlock
}

// GetInsertWebBlockOk returns a tuple with the InsertWebBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetInsertWebBlockOk() (*InsertWebBlockRequest, bool) {
	if o == nil || o.InsertWebBlock == nil {
		return nil, false
	}
	return o.InsertWebBlock, true
}

// HasInsertWebBlock returns a boolean if a field has been set.
func (o *Request) HasInsertWebBlock() bool {
	if o != nil && o.InsertWebBlock != nil {
		return true
	}

	return false
}

// SetInsertWebBlock gets a reference to the given InsertWebBlockRequest and assigns it to the InsertWebBlock field.
func (o *Request) SetInsertWebBlock(v InsertWebBlockRequest) {
	o.InsertWebBlock = &v
}

func (o Request) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReplaceText != nil {
		toSerialize["replaceText"] = o.ReplaceText
	}
	if o.InsertText != nil {
		toSerialize["insertText"] = o.InsertText
	}
	if o.DeleteContent != nil {
		toSerialize["deleteContent"] = o.DeleteContent
	}
	if o.InsertImage != nil {
		toSerialize["insertImage"] = o.InsertImage
	}
	if o.InsertPageBreak != nil {
		toSerialize["insertPageBreak"] = o.InsertPageBreak
	}
	if o.InsertTable != nil {
		toSerialize["insertTable"] = o.InsertTable
	}
	if o.InsertNumbering != nil {
		toSerialize["insertNumbering"] = o.InsertNumbering
	}
	if o.InsertWebBlock != nil {
		toSerialize["insertWebBlock"] = o.InsertWebBlock
	}
	return json.Marshal(toSerialize)
}

type NullableRequest struct {
	value *Request
	isSet bool
}

func (v NullableRequest) Get() *Request {
	return v.value
}

func (v *NullableRequest) Set(val *Request) {
	v.value = val
	v.isSet = true
}

func (v NullableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequest(val *Request) *NullableRequest {
	return &NullableRequest{value: val, isSet: true}
}

func (v NullableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


