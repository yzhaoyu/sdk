/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com/open/wiki); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadImageRsp struct for UploadImageRsp
type UploadImageRsp struct {
	ImageID *string `json:"imageID,omitempty"`
}

// NewUploadImageRsp instantiates a new UploadImageRsp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadImageRsp() *UploadImageRsp {
	this := UploadImageRsp{}
	return &this
}

// NewUploadImageRspWithDefaults instantiates a new UploadImageRsp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadImageRspWithDefaults() *UploadImageRsp {
	this := UploadImageRsp{}
	return &this
}

// GetImageID returns the ImageID field value if set, zero value otherwise.
func (o *UploadImageRsp) GetImageID() string {
	if o == nil || o.ImageID == nil {
		var ret string
		return ret
	}
	return *o.ImageID
}

// GetImageIDOk returns a tuple with the ImageID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadImageRsp) GetImageIDOk() (*string, bool) {
	if o == nil || o.ImageID == nil {
		return nil, false
	}
	return o.ImageID, true
}

// HasImageID returns a boolean if a field has been set.
func (o *UploadImageRsp) HasImageID() bool {
	if o != nil && o.ImageID != nil {
		return true
	}

	return false
}

// SetImageID gets a reference to the given string and assigns it to the ImageID field.
func (o *UploadImageRsp) SetImageID(v string) {
	o.ImageID = &v
}

func (o UploadImageRsp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageID != nil {
		toSerialize["imageID"] = o.ImageID
	}
	return json.Marshal(toSerialize)
}

type NullableUploadImageRsp struct {
	value *UploadImageRsp
	isSet bool
}

func (v NullableUploadImageRsp) Get() *UploadImageRsp {
	return v.value
}

func (v *NullableUploadImageRsp) Set(val *UploadImageRsp) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadImageRsp) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadImageRsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadImageRsp(val *UploadImageRsp) *NullableUploadImageRsp {
	return &NullableUploadImageRsp{value: val, isSet: true}
}

func (v NullableUploadImageRsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadImageRsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


