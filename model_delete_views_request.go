/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeleteViewsRequest 删除指定表格指定子表中的指定视图请求
type DeleteViewsRequest struct {
	ViewIDs []string `json:"viewIDs,omitempty"`
}

// NewDeleteViewsRequest instantiates a new DeleteViewsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteViewsRequest() *DeleteViewsRequest {
	this := DeleteViewsRequest{}
	return &this
}

// NewDeleteViewsRequestWithDefaults instantiates a new DeleteViewsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteViewsRequestWithDefaults() *DeleteViewsRequest {
	this := DeleteViewsRequest{}
	return &this
}

// GetViewIDs returns the ViewIDs field value if set, zero value otherwise.
func (o *DeleteViewsRequest) GetViewIDs() []string {
	if o == nil || o.ViewIDs == nil {
		var ret []string
		return ret
	}
	return o.ViewIDs
}

// GetViewIDsOk returns a tuple with the ViewIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteViewsRequest) GetViewIDsOk() ([]string, bool) {
	if o == nil || o.ViewIDs == nil {
		return nil, false
	}
	return o.ViewIDs, true
}

// HasViewIDs returns a boolean if a field has been set.
func (o *DeleteViewsRequest) HasViewIDs() bool {
	if o != nil && o.ViewIDs != nil {
		return true
	}

	return false
}

// SetViewIDs gets a reference to the given []string and assigns it to the ViewIDs field.
func (o *DeleteViewsRequest) SetViewIDs(v []string) {
	o.ViewIDs = v
}

func (o DeleteViewsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewIDs != nil {
		toSerialize["viewIDs"] = o.ViewIDs
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteViewsRequest struct {
	value *DeleteViewsRequest
	isSet bool
}

func (v NullableDeleteViewsRequest) Get() *DeleteViewsRequest {
	return v.value
}

func (v *NullableDeleteViewsRequest) Set(val *DeleteViewsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteViewsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteViewsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteViewsRequest(val *DeleteViewsRequest) *NullableDeleteViewsRequest {
	return &NullableDeleteViewsRequest{value: val, isSet: true}
}

func (v NullableDeleteViewsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteViewsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


