/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecordResource struct for RecordResource
type RecordResource struct {
	RecordID *string `json:"recordID,omitempty"`
	CreateTime *int64 `json:"createTime,omitempty"`
	UpdateTime *int64 `json:"updateTime,omitempty"`
	Values *map[string]interface{} `json:"values,omitempty"`
}

// NewRecordResource instantiates a new RecordResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordResource() *RecordResource {
	this := RecordResource{}
	return &this
}

// NewRecordResourceWithDefaults instantiates a new RecordResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordResourceWithDefaults() *RecordResource {
	this := RecordResource{}
	return &this
}

// GetRecordID returns the RecordID field value if set, zero value otherwise.
func (o *RecordResource) GetRecordID() string {
	if o == nil || o.RecordID == nil {
		var ret string
		return ret
	}
	return *o.RecordID
}

// GetRecordIDOk returns a tuple with the RecordID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResource) GetRecordIDOk() (*string, bool) {
	if o == nil || o.RecordID == nil {
		return nil, false
	}
	return o.RecordID, true
}

// HasRecordID returns a boolean if a field has been set.
func (o *RecordResource) HasRecordID() bool {
	if o != nil && o.RecordID != nil {
		return true
	}

	return false
}

// SetRecordID gets a reference to the given string and assigns it to the RecordID field.
func (o *RecordResource) SetRecordID(v string) {
	o.RecordID = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *RecordResource) GetCreateTime() int64 {
	if o == nil || o.CreateTime == nil {
		var ret int64
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResource) GetCreateTimeOk() (*int64, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *RecordResource) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given int64 and assigns it to the CreateTime field.
func (o *RecordResource) SetCreateTime(v int64) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *RecordResource) GetUpdateTime() int64 {
	if o == nil || o.UpdateTime == nil {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResource) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *RecordResource) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *RecordResource) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *RecordResource) GetValues() map[string]interface{} {
	if o == nil || o.Values == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResource) GetValuesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *RecordResource) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]interface{} and assigns it to the Values field.
func (o *RecordResource) SetValues(v map[string]interface{}) {
	o.Values = &v
}

func (o RecordResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecordID != nil {
		toSerialize["recordID"] = o.RecordID
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.UpdateTime != nil {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableRecordResource struct {
	value *RecordResource
	isSet bool
}

func (v NullableRecordResource) Get() *RecordResource {
	return v.value
}

func (v *NullableRecordResource) Set(val *RecordResource) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordResource) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordResource(val *RecordResource) *NullableRecordResource {
	return &NullableRecordResource{value: val, isSet: true}
}

func (v NullableRecordResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


