/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SelectFieldProperty struct for SelectFieldProperty
type SelectFieldProperty struct {
	IsMultiple *bool `json:"isMultiple,omitempty"`
	IsQuickAdd *bool `json:"isQuickAdd,omitempty"`
	Options []Option `json:"options,omitempty"`
}

// NewSelectFieldProperty instantiates a new SelectFieldProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectFieldProperty() *SelectFieldProperty {
	this := SelectFieldProperty{}
	return &this
}

// NewSelectFieldPropertyWithDefaults instantiates a new SelectFieldProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectFieldPropertyWithDefaults() *SelectFieldProperty {
	this := SelectFieldProperty{}
	return &this
}

// GetIsMultiple returns the IsMultiple field value if set, zero value otherwise.
func (o *SelectFieldProperty) GetIsMultiple() bool {
	if o == nil || o.IsMultiple == nil {
		var ret bool
		return ret
	}
	return *o.IsMultiple
}

// GetIsMultipleOk returns a tuple with the IsMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectFieldProperty) GetIsMultipleOk() (*bool, bool) {
	if o == nil || o.IsMultiple == nil {
		return nil, false
	}
	return o.IsMultiple, true
}

// HasIsMultiple returns a boolean if a field has been set.
func (o *SelectFieldProperty) HasIsMultiple() bool {
	if o != nil && o.IsMultiple != nil {
		return true
	}

	return false
}

// SetIsMultiple gets a reference to the given bool and assigns it to the IsMultiple field.
func (o *SelectFieldProperty) SetIsMultiple(v bool) {
	o.IsMultiple = &v
}

// GetIsQuickAdd returns the IsQuickAdd field value if set, zero value otherwise.
func (o *SelectFieldProperty) GetIsQuickAdd() bool {
	if o == nil || o.IsQuickAdd == nil {
		var ret bool
		return ret
	}
	return *o.IsQuickAdd
}

// GetIsQuickAddOk returns a tuple with the IsQuickAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectFieldProperty) GetIsQuickAddOk() (*bool, bool) {
	if o == nil || o.IsQuickAdd == nil {
		return nil, false
	}
	return o.IsQuickAdd, true
}

// HasIsQuickAdd returns a boolean if a field has been set.
func (o *SelectFieldProperty) HasIsQuickAdd() bool {
	if o != nil && o.IsQuickAdd != nil {
		return true
	}

	return false
}

// SetIsQuickAdd gets a reference to the given bool and assigns it to the IsQuickAdd field.
func (o *SelectFieldProperty) SetIsQuickAdd(v bool) {
	o.IsQuickAdd = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SelectFieldProperty) GetOptions() []Option {
	if o == nil || o.Options == nil {
		var ret []Option
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectFieldProperty) GetOptionsOk() ([]Option, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SelectFieldProperty) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Option and assigns it to the Options field.
func (o *SelectFieldProperty) SetOptions(v []Option) {
	o.Options = v
}

func (o SelectFieldProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsMultiple != nil {
		toSerialize["isMultiple"] = o.IsMultiple
	}
	if o.IsQuickAdd != nil {
		toSerialize["isQuickAdd"] = o.IsQuickAdd
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableSelectFieldProperty struct {
	value *SelectFieldProperty
	isSet bool
}

func (v NullableSelectFieldProperty) Get() *SelectFieldProperty {
	return v.value
}

func (v *NullableSelectFieldProperty) Set(val *SelectFieldProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectFieldProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectFieldProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectFieldProperty(val *SelectFieldProperty) *NullableSelectFieldProperty {
	return &NullableSelectFieldProperty{value: val, isSet: true}
}

func (v NullableSelectFieldProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectFieldProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


