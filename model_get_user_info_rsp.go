/*
Tencent Docs SDK

Tencent docs sdk contains DocAPI, SmartsheetAPI, SheetAPI, DriveAPI and OAuthAPI

API version: 0.0.1
Contact: tencentdocs@tencent.com
*/

// Code generated by Tencent Docs (https://docs.qq.com/open/wiki); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetUserInfoRsp struct for GetUserInfoRsp
type GetUserInfoRsp struct {
	OpenID *string `json:"openID,omitempty"`
	Nick *string `json:"nick,omitempty"`
	Avatar *string `json:"avatar,omitempty"`
	Source *string `json:"source,omitempty"`
}

// NewGetUserInfoRsp instantiates a new GetUserInfoRsp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserInfoRsp() *GetUserInfoRsp {
	this := GetUserInfoRsp{}
	return &this
}

// NewGetUserInfoRspWithDefaults instantiates a new GetUserInfoRsp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserInfoRspWithDefaults() *GetUserInfoRsp {
	this := GetUserInfoRsp{}
	return &this
}

// GetOpenID returns the OpenID field value if set, zero value otherwise.
func (o *GetUserInfoRsp) GetOpenID() string {
	if o == nil || o.OpenID == nil {
		var ret string
		return ret
	}
	return *o.OpenID
}

// GetOpenIDOk returns a tuple with the OpenID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserInfoRsp) GetOpenIDOk() (*string, bool) {
	if o == nil || o.OpenID == nil {
		return nil, false
	}
	return o.OpenID, true
}

// HasOpenID returns a boolean if a field has been set.
func (o *GetUserInfoRsp) HasOpenID() bool {
	if o != nil && o.OpenID != nil {
		return true
	}

	return false
}

// SetOpenID gets a reference to the given string and assigns it to the OpenID field.
func (o *GetUserInfoRsp) SetOpenID(v string) {
	o.OpenID = &v
}

// GetNick returns the Nick field value if set, zero value otherwise.
func (o *GetUserInfoRsp) GetNick() string {
	if o == nil || o.Nick == nil {
		var ret string
		return ret
	}
	return *o.Nick
}

// GetNickOk returns a tuple with the Nick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserInfoRsp) GetNickOk() (*string, bool) {
	if o == nil || o.Nick == nil {
		return nil, false
	}
	return o.Nick, true
}

// HasNick returns a boolean if a field has been set.
func (o *GetUserInfoRsp) HasNick() bool {
	if o != nil && o.Nick != nil {
		return true
	}

	return false
}

// SetNick gets a reference to the given string and assigns it to the Nick field.
func (o *GetUserInfoRsp) SetNick(v string) {
	o.Nick = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *GetUserInfoRsp) GetAvatar() string {
	if o == nil || o.Avatar == nil {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserInfoRsp) GetAvatarOk() (*string, bool) {
	if o == nil || o.Avatar == nil {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *GetUserInfoRsp) HasAvatar() bool {
	if o != nil && o.Avatar != nil {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *GetUserInfoRsp) SetAvatar(v string) {
	o.Avatar = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *GetUserInfoRsp) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserInfoRsp) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *GetUserInfoRsp) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *GetUserInfoRsp) SetSource(v string) {
	o.Source = &v
}

func (o GetUserInfoRsp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OpenID != nil {
		toSerialize["openID"] = o.OpenID
	}
	if o.Nick != nil {
		toSerialize["nick"] = o.Nick
	}
	if o.Avatar != nil {
		toSerialize["avatar"] = o.Avatar
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableGetUserInfoRsp struct {
	value *GetUserInfoRsp
	isSet bool
}

func (v NullableGetUserInfoRsp) Get() *GetUserInfoRsp {
	return v.value
}

func (v *NullableGetUserInfoRsp) Set(val *GetUserInfoRsp) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserInfoRsp) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserInfoRsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserInfoRsp(val *GetUserInfoRsp) *NullableGetUserInfoRsp {
	return &NullableGetUserInfoRsp{value: val, isSet: true}
}

func (v NullableGetUserInfoRsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserInfoRsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


